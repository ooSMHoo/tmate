<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mate">
	<insert id="insertMate" parameterType="com.sp.trip.mate.Mate">
		INSERT INTO mate(mateNum, memberId, mateSubject, mateContent, 
			 mateHit, mateReg_date)
		VALUES (mate_seq.NEXTVAL, #{memberId}, #{mateSubject}, #{mateContent},
			0, SYSDATE)
	</insert>


	<sql id="where-list">
		<choose>
			<when test="condition == 'all' ">
			   ( INSTR(mateSubject, #{keyword}) &gt; 0
		          OR DBMS_LOB.INSTR(mateContent, #{keyword}) &gt; 0 )
			</when>
			<when test="condition == 'mateReg_date' ">
			   ( TO_CHAR(mateReg_date, 'YYYYMMDD') = #{keyword}
		          OR TO_CHAR(mateReg_date, 'YYYY-MM-DD') = #{keyword} )
			</when>
			<when test="condition == 'mateContent'">
			    DBMS_LOB.INSTR(mateContent, #{keyword}) &gt; 0
			</when>
			<otherwise>
			    INSTR(${condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>

	<!-- 글개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM mate a
		JOIN member1 m ON a.memberId=m.memberId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
		</where>   
	</select>

	<!-- 글리스트 -->
	<select id="listMate" parameterType="map" resultType="com.sp.trip.mate.Mate">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT a.mateNum, a.memberId, memberName, mateSubject, 
				       TO_CHAR(a.mateReg_date, 'YYYY-MM-DD') mateReg_date,
				       mateHit
				       
				FROM mate a
				JOIN member1 m ON a.memberId=m.memberId
				<where>
					<if test="keyword != null and keyword != ''">
						<include refid="where-list"/>
					</if>
				</where>
				ORDER BY mateNum DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}	
	</select>

	<!-- 글보기 -->
	<select id="readMate" parameterType="Integer" resultType="com.sp.trip.mate.Mate">
		SELECT a.mateNum, a.memberId, memberName, mateSubject, mateContent,
			   mateHit, a.mateReg_date
		FROM mate a
		JOIN member1 m ON a.memberId=m.memberId
		WHERE mateNum = #{mateNum}  
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Integer">
		UPDATE mate SET mateHit=mateHit+1 WHERE mateNum = #{mateNum}
	</update>
	
	<!-- AND 가 필요 없는 경우 자동으로 제거 됨 -->
	<!-- 이전글 -->
	<select id="preReadMate" parameterType="map" resultType="com.sp.trip.mate.Mate">
		SELECT * FROM (
			SELECT mateNum, mateSubject
			FROM mate a
			JOIN member1 m ON a.memberId=m.memberId
			<where>
				<if test="keyword != null and keyword != '' ">
					<include refid="where-list"/>
				</if>
				AND (mateNum &gt; #{mateNum})
			</where>
			ORDER BY mateNum ASC
		) WHERE ROWNUM = 1	
	</select>

	<!-- 다음글 -->
	<select id="nextReadMate" parameterType="map" resultType="com.sp.trip.mate.Mate">
		SELECT * FROM (
			SELECT mateNum, mateSubject
			FROM mate a
			JOIN member1 m ON a.memberId=m.memberId
			<where>
				<if test="keyword != null and keyword != '' ">
					<include refid="where-list"/>
				</if>
				AND (mateNum &lt; #{mateNum})
			</where>
			ORDER BY mateNum DESC
		) WHERE ROWNUM = 1
	</select>

	<!-- 수정 -->
	<update id="updateMate" parameterType="com.sp.trip.mate.Mate">
		UPDATE mate SET mateSubject=#{mateSubject}, mateContent=#{mateContent}
		WHERE mateNum = #{mateNum}
	</update>
      
	<!-- 삭제 -->
	<delete id="deleteMate" parameterType="Integer">
		DELETE FROM mate WHERE mateNum = #{mateNum}
	</delete>
      
      
      <!-- 댓글 -->
	<insert id="insertReply" parameterType="com.sp.trip.mate.Reply">
		INSERT INTO mateReply(mateRe_num, mateNum, memberId, mateRe_content, mateRe_parent, mateRe_reg_date)
		VALUES (mateReply_seq.NEXTVAL, #{mateNum}, #{memberId}, #{mateRe_content}, #{mateRe_parent}, SYSDATE)
	</insert>

	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM mateReply
		WHERE mateNum=#{mateNum} AND mateRe_parent=0
	</select>

	<!-- 댓글리스트 -->
	<select id="listReply" parameterType="map" resultType="com.sp.trip.mate.Reply">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM (
				SELECT r.mateRe_num, r.memberId, memberName, mateNum, mateRe_content, r.mateRe_reg_date, 
				       NVL(answerCount, 0) answerCount
				FROM mateReply r
				JOIN member1 m ON r.memberId = m.memberId
				LEFT OUTER JOIN (
					SELECT mateRe_parent, COUNT(*) answerCount
					FROM mateReply WHERE mateRe_parent!=0 GROUP BY mateRe_parent
				) a ON r.mateRe_num = a.mateRe_parent
				WHERE mateNum=#{mateNum}  AND r.mateRe_parent=0
				ORDER BY r.mateRe_num DESC
			) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<delete id="deleteReply" parameterType="map">
		DELETE FROM mateReply
		WHERE mateRe_num=#{mateRe_num}
		<if test="mode=='reply'">
			OR mateRe_parent=#{mateRe_num}
		</if>
	</delete>
	
	<!-- 댓글의 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.trip.mate.Reply">
		SELECT mateRe_num, mateNum, r.memberId, memberName, mateRe_content, mateRe_reg_date, mateRe_parent
		FROM mateReply r
		JOIN member1 m ON r.memberId = m.memberId
		WHERE mateRe_parent = #{mateRe_parent}
		ORDER BY mateRe_num DESC
	</select>
	
	<!-- 댓글의 답글 개수 -->
	<select id="replyAnswerCount" parameterType="Integer" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM mateReply WHERE mateRe_parent = #{mateRe_parent}
	</select>
	
	
</mapper>